# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Role {
  id: Int!
  name: String!
  users: [User!]!
}

type User {
  id: Int!
  email: String!
  fullName: String!
  password: String!
  role: Role!
}

type SessionUser {
  id: Int!
  email: String!
  role: String!
}

type Book {
  id: Int!
  title: String!
  publishedAt: DateTime!
  authors: [Author!]!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Author {
  id: Int!
  fullName: String!
  email: String!
  birthDate: String!
  books: [Book!]!
}

type UserActivityLogEntity {
  pk: String!
  sk: String!
  activityType: String!
  details: String!
}

type ReviewEntity {
  pk: String!
  sk: String!
  message: String!
  rating: Float!
  publishedAt: Float!
}

type Query {
  """
  Get current user session data;
    
    Allowed roles: `user`, `moderator`, `admin`;
  """
  getSessionUser: SessionUser!

  """
  Get books list;
    
    Allowed roles: `all users`;
  """
  books(getBooksArgs: GetBooksArgs!): [Book!]!

  """
  Get book by ID;
    
    Allowed roles: `all users`;
  """
  book(id: Float!): Book!
  authors: Author!
  author(id: Float!): Author!

  """
  Get specific user activity log;
    
    Allowed roles: `admin`, `moderator`, `user`;
  """
  userActivityLog(timestamp: String!): UserActivityLogEntity!

  """
  Get user activity logs;
    
    Allowed roles: `admin`, `moderator`, `user`;
  """
  userActivityLogs: [UserActivityLogEntity!]!

  """
  Get user reviews;
    
    Allowed roles: `all users`;
  """
  findByUser(userId: Float!): [ReviewEntity!]!
}

input GetBooksArgs {
  offset: Int = 0
  limit: Int = 10
  search: String

  """
  Sort field;
    Allowed values: `id`, `title`, `publishedAt`;
    Allowed roles: `all users`;
  """
  sortField: String! = "id"

  """
  Sort order;
    Allowed values: `ASC`, `DESC`;
    Allowed roles: `all users`;
  """
  sortOrder: String! = "ASC"
}

type Mutation {
  """
  Create a new book;
    
    Allowed roles: `admin`, `moderator`;
  """
  createBook(createBookInput: createBookInput!): Book!

  """
  Update a book;
    
    Allowed roles: `admin`, `moderator`;
  """
  updateBook(updateBookInput: updateBookInput!): Book!

  """
  Remove a book;
    
    Allowed roles: `admin`;
  """
  removeBook(id: Float!): String!

  """Create an author, allowed for roles: admin, moderator;"""
  createAuthor(createAuthorInput: createAuthorInput!): Author!

  """Update an author, allowed for roles: admin, moderator;"""
  updateAuthor(updateAuthorInput: updateAuthorInput!): Author!

  """Remove an author, allowed for roles: admin;"""
  removeAuthor(id: Float!): Author!
  createUserActivityLog(createUserActivityLogInput: createUserActivityLogInput!): UserActivityLogEntity!
  createReview(createReviewInput: createReviewInput!): ReviewEntity!
}

input createBookInput {
  title: String!
  publishedAt: DateTime!
  authors: [createAuthorInput!]!
}

input createAuthorInput {
  id: Float
  fullName: String!
  email: String!
  birthDate: String!
}

input updateBookInput {
  title: String
  publishedAt: DateTime
  authors: [createAuthorInput!]
  id: Float!
}

input updateAuthorInput {
  id: Float!
}

input createUserActivityLogInput {
  activityType: String!
  details: String!
}

input createReviewInput {
  bookId: Float!
  message: String!
  rating: Float!
  publishedAt: DateTime!
}